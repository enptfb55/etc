" Filename:      etc/vim/vimrc
" Last modified: 2016.04.26
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


" set the python3 dll path
if !has('nvim')
    set pythonthreedll=/mnt/backingTrees_el7_cmake/bin/miniconda3/envs/py_cmake_build/lib/libpython3.6m.so
endif

" this must be first because it changes other options as side-effects
set nocompatible

" where vim will search for customizations on start-up
set runtimepath+=$VIMRUNTIME
set runtimepath+=/usr/share/vim/vimfiles
set runtimepath+=/usr/share/vim/vimfiles/after
set runtimepath+=$ETC/vim,$ETC/vim/after


" vim-plug shit
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

call plug#begin('$HOME/etc/vim/plugged')

" Make sure you use single quotes

" Alternate between h and cpp files
Plug 'https://github.com/vim-scripts/a.vim'

" Easy commenting
Plug 'https://github.com/tpope/vim-commentary.git'

" solarized color scheme
Plug 'https://github.com/altercation/solarized.git'

" jellybeans color scheme
Plug 'https://github.com/nanotech/jellybeans.vim.git'

" tmux syntax highlighting
Plug 'https://github.com/tmux-plugins/vim-tmux.git'

" c++11/14 syntax highlighting
Plug 'https://github.com/octol/vim-cpp-enhanced-highlight.git'

" NerdTree
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin.git'

" CtrlP
Plug 'https://github.com/kien/ctrlp.vim.git'

" CtrlSF
Plug 'https://github.com/dyng/ctrlsf.vim.git'

" clang-format
Plug 'https://github.com/rhysd/vim-clang-format.git'

" YCM
"Plug 'https://github.com/Valloric/YouCompleteMe.git'

" Doxygen autocomplete
Plug 'https://github.com/vim-scripts/DoxygenToolkit.vim.git'


Plug 'https://github.com/jalvesaq/Nvim-R.git'
Plug 'https://github.com/jalvesaq/vimcmdline.git'

" " show useful info in the tabline
" Plugin 'mkitt/tabline.vim'

" nvim-cmp
if has('nvim')
    "Plug 'nvim-lua/completion-nvim'

    Plug 'neovim/nvim-lspconfig'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'hrsh7th/nvim-cmp'

    " For vsnip users.
    Plug 'hrsh7th/cmp-vsnip'
    Plug 'hrsh7th/vim-vsnip'

    " For luasnip users.
    Plug 'L3MON4D3/LuaSnip'
    Plug 'saadparwaiz1/cmp_luasnip'

    " For ultisnips users.
    Plug 'SirVer/ultisnips'
    Plug 'quangnguyen30192/cmp-nvim-ultisnips'

    " For snippy users.
    Plug 'dcampos/nvim-snippy'
    Plug 'dcampos/cmp-snippy'
endif


" Add plugins to &runtimepath
call plug#end()


" add vundle to the path
"set rtp+=~/.vim/bundle/Vundle.vim

" list plugins with vundle begin and end
"call vundle#begin()

" let Vundle manage Vundle (required)
"Plugin 'VundleVim/Vundle.vim'

" alternate between h and cpp files
"Plugin 'a.vim'

" easy commenting
"Plugin 'tpope/vim-commentary'

" solarized color scheme
"Plugin 'altercation/vim-colors-solarized'

"Plugin 'lifepillar/vim-wwdc16-theme'

" jellybeans color scheme
"Plugin 'nanotech/jellybeans.vim'

" tmux syntax highlighting
"Plugin 'keith/tmux.vim.git'

" c++11/14 syntax highlighting
"Plugin 'octol/vim-cpp-enhanced-highlight'

"call vundle#end()

" re-enable filetype detection
filetype on

" enable loading of plugins for specific filetypes
filetype plugin on

" enable loading indent for specific filetypes
filetype indent on


" key re-mapping
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" no more having to type ':', just type ';'
nnoremap ; :

" change the mapleader from '\' to ','
let g:mapleader=","

" ctrl-h/j/k/l to navigate between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" quickly get out of insert mode by typing 'jk'
inoremap jk <Esc>

" send xterm-style keys when tmux's xterm-keys option is on
if &term =~ '^screen' || &term =~ '^tmux'
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" alt-j/k inserts blank line below/above current line
nnoremap <silent><A-j> :put =''<CR>
nnoremap <silent><A-k> :put! =''<CR>


" custom commands
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    keepp %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" save files using sudo with 'W'
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" automatically reload vimrc when saved
autocmd! bufwritepost ${HOME}/etc/vim/vimrc source %

autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif


" NerdTree Stuff
autocmd vimenter * if &filetype !=# 'gitcommit' | NERDTree % | endif
autocmd BufEnter * if !argc() | NerdTreeMirror | endif

" Go to previous (last accesed) window
autocmd vimEnter * wincmd p

" CtrlSF
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_extra_root_markers = ['.root']
let g:ctrlsf_extra_backend_args = {'ack': ' --ignore-dir=env --ignore-dir=venv --ignore-dir=.venv --type=cpp --type=python'}
nmap     <C-F>f <Plug>CtrlSFPrompt                  
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath


" clang-format stuff
"let g:clang_format#style_options = {
"            \ "AccessModifierOffset" : -4,
"            \ "AllowShortIfStatementsOnASingleLine" : "true",
"            \ "AlwaysBreakTemplateDeclarations" : "true",
"            \ "Standard" : "C++11"}
"
let g:clang_format#detect_style_file = 1
let g:clang_format#auto_formatexpr = 1

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>

" appearance
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" turn on utf-8 all over the place
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8

" allow for syntax highlighting (NOT 'syntax on' which turns on vim's
" default highlighting)
syntax enable

" notify all schemes that we're using a dark background
set background=dark

" colorscheme: solarized
"       https://github.com/altercation/vim-colors-solarized
" let g:solarized_termcolors=256
"silent! colorscheme solarized

" colorscheme: jellybeans
"       https://github.com/nanotech/jellybeans.vim
silent! colorscheme jellybeans

"silent! colorscheme wwdc16

"silent! colorscheme desert

" customize color of ColorColumn
highlight ColorColumn ctermbg=235 ctermfg=white

" display unprintable characters
set list
set listchars=tab:»·
set listchars+=trail:·
set listchars+=extends:>
set listchars+=precedes:<
set listchars+=nbsp:·

" always show (relative) line numbers
"set relativenumber
set nu

" draw a line down a specific column
set colorcolumn=100

" reduce the size of the gutter column (where line numbers show up)
set numberwidth=3

" keep 4 lines off the edges of the screen when scrolling
set scrolloff=4

" show matching parentheses
set showmatch

" always show the status line, even if there is only one window
set laststatus=2

" show a tab bar on top at all times
set showtabline=2

" always show cursor position
set ruler

" show partial command in the last line of the screen
set showcmd


" c-indent config
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set cindent

" put case labels in same column as switch
set cinoptions=:0

" align } with case label
set cinoptions+=l1

" align break with case label
set cinoptions+=b1

" align c++ scope specifiers at same column as block
set cinoptions+=g0

" don't indent inside namespaces
set cinoptions+=N-s

" indent a continuation line 2 * shiftwidth
set cinoptions+=+2s

" assist in lining up break with case statements
set cinkeys+=0=break

" set basic text width to 72 chars
set textwidth=0

" copy previous line's indent characters.
set copyindent

" insert spaces instead of tabs.
set expandtab

" use multiple of shiftwidth when indenting with '<' and '>'.
set shiftround

" number of spaces to use for autoindenting.
set shiftwidth=4

" treat 4 spaces as a tab when deleting.
set smarttab

" tabs are replaced by 4 spaces.
set tabstop=4

" change cursor in terminal vim (and under tmux)
if &term =~ '^xterm' || &term =~ '^screen' || &term =~ '^tmux'

    " 1 or 0: blinking block
    " 2:      solid block
    " 3:      blinking underscore
    " 4:      solid underscore

    " solid underscore in insert mode
    let &t_SI .= "\<Esc>[4 q"

    " blinking block in command mode
    let &t_EI .= "\<Esc>[1 q"

endif


" editing behavior
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" wrap lines at window edge.
set wrap

" press <F2> to enter paste-mode
set pastetoggle=<F2>

" enable mouse
set mouse=a

" delete comment character when joining commented lines
set formatoptions+=j

" only insert single space after joining lines
set nojoinspaces

" fix for weird iskeyword settings.
set iskeyword-=-
set iskeyword-=+

" allow clicking past 220 columns in tmux
if has("mouse_sgr")
    set ttymouse=sgr
else 
    if !has('nvim')
        set ttymouse=xterm2
    endif
end


" searching
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" highlight search terms
set hlsearch

" ignore case when searching
set ignorecase

" show search matches as you type
set incsearch

" ignore case if pattern is all lowercase, case-sensitive otherwise
set smartcase

" clears the search register by typing ',' then '/'
nmap <silent> <leader>/ :nohlsearch<CR>


" filetype-specific handling
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" turn off 'spaces instead of tabs' for editing makefiles
autocmd FileType make setlocal noexpandtab

" use c++-style comments for c++ files (for vim commentary plugin)
autocmd FileType cpp setlocal commentstring=//\ %s

" fix 'temp file must be edited in place' problem when editing crontabs
" in bsd and osx
autocmd FileType crontab setlocal backupcopy=yes

" set spell for git commits
autocmd FileType gitcommit setlocal spell


" vim behavior
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" number of commands and search history to remember
set history=10000

" do not keep backup files
set nobackup

" don't beep. ever
set noerrorbells

" don't produce .swp files
set noswapfile

" set undo directory
set undodir=~/.vim/undodir
if has('nvim')
    set undodir=${HOME}/.local/share/nvim/undodir
endif


" set undo file
set undofile

" lots of undo history
set undolevels=1000
set undoreload=10000

" read/write .viminfo file, but don't store more than 80 registers
set viminfo='20,\"80

" change location of the viminfo file
if has('nvim')
    set viminfo+=n${HOME}/.local/share/nvim/viminfo
else
    set viminfo+=n${HOME}/var/vim/viminfo
endif

" use enhanced command line completion
set wildmenu

" ignore these files in file completion
set wildignore=*.a,*.o,*.pyc,*.so

" make tab completion for files/buffers act like bash
set wildmode=longest,list

" new horizontal-split window appears on bottom
set splitbelow

" new vertical-split window appears on right
set splitright

" turn off netrw history
let g:netrw_dirhistmax = 0

if (!has('nvim'))
    " ycm extra conf
    let g:ycm_global_ycm_extra_conf = '$ETC/vim/.ycm_extra_conf.py'
    map <F10> :YcmCompleter FixIt<CR>
endif


" speed up scrolling of the viewport
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

map <F9> :NERDTreeToggle %<CR>

" open ctag in tab/vertical split
" nnoremap <C-]> :only<bar>vsplit<CR>:execute "tag" . expand('<cword>')<CR>
" map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" map <leader><C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


" DoxygenToolkit
let g:DoxygenToolkit_briefTag_pre="\\brief  "
let g:DoxygenToolkit_paramTag_pre="\\param "
let g:DoxygenToolkit_returnTag="\\returns   "
let g:DoxygenToolkit_blockHeader=""
let g:DoxygenToolkit_blockFooter=""
let g:DoxygenToolkit_authorName="Sal Amato (samato@hap-capital.com)"
let g:DoxygenToolkit_licenseTag=""

if (has('nvim'))
    " Use completion-nvim in every buffer
    "autocmd BufEnter * lua require'completion'.on_attach()
    source /home/samato/etc/vim/nvim.vim
endif
