#!/usr/bin/env bash
# Filename:      etc/bootstrap
# Last modified: 2016.03.17
#
# After cloning the etc.git repo into ${HOME}, this script will create the
# necessary directory structure and symlinks.

set -o nounset -o pipefail

# set up logging so that stdout and stderr go to a log file
# note: to print only to console (original stdout), use echo "hello" 1>&3
readonly LOG="${HOME}/var/log/bootstrap.log"
exec 3>&1 1>>"${LOG}" 2>&1

_log() { printf "[%s] [%s] [%s] {%s} %s\n" "$(date +'%Y.%m.%d %H:%M:%S%z')" $$ "$1" ${FUNCNAME[2]} "${*:2}" ; }
log_debug() { _log "DEBUG" "$@" ; }
log_info()  { _log "INFO " "$@" ; }
log_error() { _log "ERROR" "$@" | tee /dev/fd/3 ; }
log_fatal() { _log "FATAL" "$@" | tee /dev/fd/3 ; exit 1 ; }


confirm()
{
    (( "$#" != 1 )) && log_fatal "missing argument to function"

    # prompt user
    printf "%s? " "$1" >&3

    # capture response
    read -n 1 -r response

    case ${response} in
        y)                                       return 0 ;;
        *) [[ ! -z ${response} ]] && echo >&3 && return 1 ;;
    esac
}


create_symlink()
{
    (( "$#" != 2 )) && log_fatal "missing argument to function"

    local cmd
    case $(uname) in

        Linux)
            cmd="ln --force --no-dereference --symbolic"
        ;;

        Darwin)
            # if ln supports the --version option, it's GNU ln
            if ln --version &> /dev/null; then
                cmd="ln --force --no-dereference --symbolic"
            else
                cmd="ln -fhs"
            fi
        ;;

        *)
            log_fatal "unknown os [$(uname)]"
            return 1
        ;;

    esac

    log_info "calling [${cmd} $*]"

    local output
    output=$(${cmd} "$@" 2>&1)
    local exit_status=$?

    if (( ${exit_status} != 0 )); then
        log_error "output [${output}]"
        log_fatal "exit_status [${exit_status}]"
        return 1
    fi

    log_debug "output [${output}]"
    log_debug "exit_status [${exit_status}]"
    return 0
}


create_dir()
{
    (( "$#" != 1 )) && log_fatal "missing argument to function" && return 1

    # if directory already exists, we have nothing to do
    [[ -d $1 ]] && log_debug "dir [$1] already exists" && return 0

    local cmd
    case $(uname) in
        Linux)
            cmd="mkdir --mode=0700"
        ;;

        Darwin)
            # if mkdir supports the --version option, it's GNU mkdir
            if mkdir --version &> /dev/null; then
                cmd="mkdir --mode=0700"
            else
                cmd="mkdir -m 0700"
            fi
        ;;

        *)
            log_fatal "unknown os [$(uname)]"
            return 1
        ;;
    esac

    log_info "calling [${cmd} $1]"

    local output
    output=$(${cmd} "$1" 2>&1)
    local exit_status=$?

    if (( ${exit_status} != 0 )); then
        log_error "output [${output}]"
        log_fatal "exit_status [${exit_status}]"
        return 1
    fi

    log_debug "output [${output}]"
    log_debug "exit_status [${exit_status}]"
    return 0
}


load_bash_profile()
{
    # turn off options while we source the profile
    set +o errexit +o nounset +o pipefail

    source "${HOME}/.bash_profile"

    # restore options
    set -o errexit -o nounset -o pipefail
}


install_vundle()
{
    if [[ -d "${HOME}/etc/vim/bundle/Vundle.vim" ]]; then
        log_info "${HOME}/etc/vim/bundle/Vundle.vim already exists"
        return 0
    fi

    # clone the repo
    local cmd="git clone --quiet https://github.com/VundleVim/Vundle.vim.git ${HOME}/etc/vim/bundle/Vundle.vim"
    log_debug "calling [${cmd}]"

    local output
    output=$(${cmd} 2>&1)
    local exit_status=$?

    if (( ${exit_status} != 0 )); then
        log_error "output [${output}]"
        log_fatal "exit_status [${exit_status}]"
        return 1
    fi

    log_debug "output [${output}]"
    log_debug "exit_status [${exit_status}]"
    return 0
}


install_vim_plugins()
{
    # run vim command to install other plugins
    local cmd="vim -e +PluginInstall +qall"
    log_debug "calling [${cmd}]"

    local output
    output=$(${cmd} &> /dev/null)
    local exit_status=$?

    # FIXME: for some reason this command always seems to return 1
    if (( ${exit_status} != 0 )); then
        log_error "output [${output}]"
        log_error "exit_status [${exit_status}]"
        return 0
    fi

    log_debug "output [${output}]"
    log_debug "exit_status [${exit_status}]"
    return 0
}


main()
{
    # since this script writes to a log, we need to at least try to create the
    # logs directory
    mkdir -p "${HOME}/var/log"

    log_info "$0"

    [[ -z ${HOME:-} ]] && log_fatal "error: HOME is not set"

    create_dir "${HOME}/bin"
    create_dir "${HOME}/run"
    create_dir "${HOME}/src"
    create_dir "${HOME}/tmp"
    create_dir "${HOME}/var"

    confirm "bash" \
            && create_symlink etc/bash/bash_profile ${HOME}/.bash_profile \
            && create_symlink etc/bash/bashrc ${HOME}/.bashrc \
            && create_dir ${HOME}/var/bash \
            && create_dir ${HOME}/var/less \
            && create_dir ${HOME}/var/python \
            && load_bash_profile \
            && printf " [installed]\n" >&3

    confirm "chromium" \
            && create_symlink ../etc/chromium/chromium_wrapper ${HOME}/bin/chromium \
            && printf " [installed]\n" >&3

    confirm "hushlogin" \
            && > ${HOME}/.hushlogin \
            && printf " [installed]\n" >&3

    confirm "locate" \
            && create_dir ${HOME}/var/mlocate \
            && printf " [installed]\n" >&3

    confirm "top" \
            && create_symlink etc/top/toprc ${HOME}/.toprc \
            && printf " [installed]\n" >&3

    confirm "tmux" \
            && create_symlink ../etc/tmux/tmux.wrapper.$(uname) ${HOME}/bin/tmux \
            && printf " [installed]\n" >&3

    confirm "vim" \
            && create_symlink etc/vim ${HOME}/.vim \
            && create_dir ${HOME}/etc/vim/bundle \
            && create_dir ${HOME}/var/vim \
            && install_vundle \
            && install_vim_plugins \
            && printf " [installed]\n" >&3

    confirm "xauthority" \
            && create_dir ${HOME}/var/xauthority \
            && create_symlink ../etc/x/startx_wrapper ${HOME}/bin/startx \
            && create_symlink ../../x/50_xauthority ${HOME}/etc/bash/bash_profile.$(uname).d/50_xauthority \
            && printf " [installed]\n" >&3

    return 0
} # main()


# main entry point
main "$@"
